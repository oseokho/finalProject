package com.bbbboone.service;



import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bbbboone.domain.AuthVo;
import com.bbbboone.domain.Criteria;
import com.bbbboone.domain.EnrollclassVo;
import com.bbbboone.domain.MemberVo;
import com.bbbboone.domain.WithdrawVo;
import com.bbbboone.mapper.MemberMapper;

import lombok.Getter;
import lombok.Setter;

@Service
public class MemberServiceImpl implements MemberService {
	


	/* 
	 * 회원 가입,회원 수정,회원 개별조회 회원 탈퇴
	 * 10.22 곽승협
	 * */
	@Getter @Autowired
	private MemberMapper memberMapper;
	@Setter @Autowired
	BCryptPasswordEncoder pwdEncoder;
	@Setter @Autowired
	private WithdrawService wService;
	@Setter @Autowired
	private WithdrawVo vo;
	@Override @Transactional
	public void join(MemberVo member) {
		member.setPw(pwdEncoder.encode(member.getPw()));
		memberMapper.join(member); // insert tbl_member
		member.setAuths(Arrays.asList(new AuthVo[] {new AuthVo(member.getId(), "ROLE_MEMBER")}));
		member.getAuths().forEach(memberMapper::insertAuth);
	}	


	@Override
	public void modify(MemberVo member) {
		member.setPw(pwdEncoder.encode(member.getPw()));
		memberMapper.modify(member);
	}

	@Override
	public void select(Long studno) {
		memberMapper.select(studno);	
	}

	@Override
	public void withdraw(MemberVo member) {
		/*SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");
		Date date = new Date(System.currentTimeMillis());
		String sDate = sdf.format(date);
		member.setPw(pwdEncoder.encode(member.getPw()));
		memberMapper.withdraw(member);
		try {
		Date pDate = (Date) sdf.parse(sDate);
		vo.setId(member.getId());
		vo.setWdate(pDate);
		vo.setComments(vo.getComments());
		wService.register(vo);
		} catch (ParseException e) {
			e.printStackTrace();
		}*/
		
	}

	@Override
	public MemberVo read(String id) {
		return memberMapper.read(id);
	}

	@Override
	public int idCheck(String id){
		return memberMapper.idCheck(id);
	}
	@Override
	public int wIdcheck(String id) {
		// TODO Auto-generated method stub
		return memberMapper.wIdcheck(id);
	}

	@Override
	public int emailCheck(String email) {
		// TODO Auto-generated method stub
		return memberMapper.emailCheck(email);
	}

	@Override
	public int phoneCheck(String phone) {
		// TODO Auto-generated method stub
		return memberMapper.phoneCheck(phone);
	}

	@Override
	public int studnoCheck(int studno) {
		// TODO Auto-generated method stub
		return memberMapper.studnoCheck(studno);
	}

	@Override
	public int studnoCheckatStudno(int studno) {
		// TODO Auto-generated method stub
		return memberMapper.studnoCheckAtstudent(studno);
	}

	@Override
	public List<EnrollclassVo> getEnrollList(Long courno) {
		return memberMapper.getEnrollList(courno);
	}

	@Override
	public List<MemberVo> getList(Criteria cri) {
		return memberMapper.getListWithPaging(cri);
	}

	@Override
	public int getTotal(Criteria cri) {
		return memberMapper.getTotalCount(cri);
	}

	@Override
	public boolean modifyAdmin(MemberVo vo) {
		return memberMapper.update(vo) > 0;
	}




	

}

